package makevalid

import (
	"context"
	"flag"
	"fmt"
	"github.com/go-spatial/geom/encoding/wkt"
	"github.com/go-spatial/geom/slippy"
	"io/ioutil"
	"strings"
	"testing"

	"github.com/go-spatial/geom"
	"github.com/go-spatial/geom/cmp"
	"github.com/go-spatial/geom/planar/makevalid/hitmap"
)

var runAll bool

func init() {
	flag.BoolVar(&runAll, "run-all", false, "to run tests marked to be skipped")
}

func TestMakeValid(t *testing.T)      { checkMakeValid(t) }
func BenchmakrMakeValid(b *testing.B) { checkMakeValid(b) }

func decodeMultiPolygon(content string) *geom.MultiPolygon {
	str := strings.NewReader(content)
	g, err := wkt.NewDecoder(str).Decode()
	if err != nil {
		panic(err)
	}
	mp, ok := g.(geom.MultiPolygon)
	if !ok {
		panic("Expected multipolygon")
	}
	return &mp
}

func checkMakeValid(tb testing.TB) {
	type tcase struct {
		MultiPolygon         *geom.MultiPolygon
		ExpectedMultiPolygon *geom.MultiPolygon
		ClipBox              *geom.Extent
		err                  error
		didClip              bool
		skip                 string
	}

	fn := func(tc tcase) func(testing.TB) {
		return func(t testing.TB) {
			if tc.skip != "" && !runAll {
				t.Skipf(tc.skip)
				return
			}
			hm, err := hitmap.NewFromPolygons(tc.ClipBox, tc.MultiPolygon.Polygons()...)
			if err != nil {
				panic("Was not expecting the hitmap to return error.")
			}
			mv := &Makevalid{
				Hitmap: hm,
			}
			gmp, didClip, gerr := mv.Makevalid(context.Background(), tc.MultiPolygon, tc.ClipBox)
			if tc.err != nil {
				if tc.err != gerr {
					t.Errorf("error, expected %v got %v", tc.err, gerr)
					return
				}
			}
			if gerr != nil {
				t.Errorf("error, expected %v got %v", tc.err, gerr)
				return
			}
			if didClip != tc.didClip {
				t.Errorf("didClipt, expected %v got %v", tc.didClip, didClip)
			}
			mp, ok := gmp.(geom.MultiPolygoner)
			if !ok {
				t.Errorf("return MultiPolygon, expected MultiPolygon got %T", gmp)
				return
			}
			if !cmp.MultiPolygonerEqual(tc.ExpectedMultiPolygon, mp) {
				t.Errorf("mulitpolygon, expected \n%v\n got \n%v", wkt.MustEncode(tc.ExpectedMultiPolygon), wkt.MustEncode(mp))
			}
		}
	}
	tests := map[string]tcase{
		"issue#70": {
			MultiPolygon: decodeMultiPolygon(
				`MULTIPOLYGON (((19359932.3028604 6936823.42893856,19360250.8689878 6936688.69960884,19360304.4693226 6936851.40220771,19360304.5746052 6936851.40848484,19361268.2934265 6936851.40848484,19361267.6612167 6936835.82513453,19361430.1208816 6936782.05044165,19361432.9421194 6936851.40848484,19361478.7453836 6936851.40848484,19361709.8667619 6936723.53133297,19361704.1226762 6936582.32953635,19361798.0206667 6936578.52274976,19361833.4647926 6936294.26940364,19361739.589066 6936298.09444482,19361686.9349468 6936158.86780031,19361780.8106734 6936155.00604701,19361775.0665877 6936013.86943516,19361960.9033456 6935959.12564909,19361964.7104722 6936053.2403234,19362226.6118382 6936136.80066362,19362162.0465336 6936280.82660515,19362023.1420729 6936333.6600593,19362223.3279132 6936631.76275541,19362454.7247934 6936752.03059318,19362454.7247934 6934328.98655178,19359932.3028604 6934328.98655178,19359932.3028604 6936823.42893856),(19361352.631384 6936031.09992153,19361414.8478475 6936405.63769592,19361274.9749073 6936434.78569641,19361178.2382698 6936368.1224444,19361244.7405336 6936271.15368887,19361305.6990867 6936033.01237908,19361352.631384 6936031.09992153),(19361630.4180414 6935925.51090632,19361632.3327366 6935972.56790791,19361538.4792739 6935976.39279552,19361536.5645787 6935929.33577147,19361630.4180414 6935925.51090632),(19362086.3826757 6935576.95934416,19362049.0127226 6935814.16767519,19362002.1026892 6935816.08008097,19361998.2732987 6935721.968192,19361951.3298694 6935723.86218747,19361945.5857837 6935582.733169,19362086.3826757 6935576.95934416)))`,
			),
			ExpectedMultiPolygon: decodeMultiPolygon(
				`MULTIPOLYGON (((19359932.303 6934328.987,19359932.303 6936823.429,19360250.869 6936688.700,19360304.469 6936851.402,19360304.575 6936851.408,19361268.293 6936851.408,19361267.661 6936835.825,19361430.121 6936782.050,19361432.942 6936851.408,19361478.745 6936851.408,19361709.867 6936723.531,19361704.123 6936582.330,19361798.021 6936578.523,19361833.465 6936294.269,19361739.589 6936298.094,19361686.935 6936158.868,19361780.811 6936155.006,19361775.067 6936013.869,19361960.903 6935959.126,19361964.710 6936053.240,19362226.612 6936136.801,19362162.047 6936280.827,19362023.142 6936333.660,19362223.328 6936631.763,19362454.725 6936752.031,19362454.725 6934328.987,19359932.303 6934328.987),(19361178.238 6936368.122,19361244.741 6936271.154,19361305.699 6936033.012,19361352.631 6936031.100,19361414.848 6936405.638,19361274.975 6936434.786,19361178.238 6936368.122),(19361536.565 6935929.336,19361630.418 6935925.511,19361632.333 6935972.568,19361538.479 6935976.393,19361536.565 6935929.336),(19361945.586 6935582.733,19362086.383 6935576.959,19362049.013 6935814.168,19362002.103 6935816.080,19361998.273 6935721.968,19361951.330 6935723.862,19361945.586 6935582.733)))
`,
			),
			didClip: true,
		},
		"issue#70_full_no_clip": {
			MultiPolygon:func()*geom.MultiPolygon{
				b, err := ioutil.ReadFile(`testdata/issue70.polygon`)
				if err != nil {
					panic(err)
				}
				return decodeMultiPolygon( string(b) )
			}(),
			ExpectedMultiPolygon: decodeMultiPolygon(
				`MULTIPOLYGON (((19359932.303 6934328.987,19359932.303 6936823.429,19360250.869 6936688.700,19360304.469 6936851.402,19360304.575 6936851.408,19361268.293 6936851.408,19361267.661 6936835.825,19361430.121 6936782.050,19361432.942 6936851.408,19361478.745 6936851.408,19361709.867 6936723.531,19361704.123 6936582.330,19361798.021 6936578.523,19361833.465 6936294.269,19361739.589 6936298.094,19361686.935 6936158.868,19361780.811 6936155.006,19361775.067 6936013.869,19361960.903 6935959.126,19361964.710 6936053.240,19362226.612 6936136.801,19362162.047 6936280.827,19362023.142 6936333.660,19362223.328 6936631.763,19362454.725 6936752.031,19362454.725 6934328.987,19359932.303 6934328.987),(19361178.238 6936368.122,19361244.741 6936271.154,19361305.699 6936033.012,19361352.631 6936031.100,19361414.848 6936405.638,19361274.975 6936434.786,19361178.238 6936368.122),(19361536.565 6935929.336,19361630.418 6935925.511,19361632.333 6935972.568,19361538.479 6935976.393,19361536.565 6935929.336),(19361945.586 6935582.733,19362086.383 6935576.959,19362049.013 6935814.168,19362002.103 6935816.080,19361998.273 6935721.968,19361951.330 6935723.862,19361945.586 6935582.733)))
`,
			),
			didClip: true,
		},
		"issue#70_full": {
			ClipBox:slippy.NewTile(13,8054,2677).Extent3857().ExpandBy(64.0),
			MultiPolygon:func()*geom.MultiPolygon{
				b, err := ioutil.ReadFile(`testdata/issue70.polygon`)
				if err != nil {
					panic(err)
				}
				return decodeMultiPolygon( string(b) )
			}(),
			ExpectedMultiPolygon: decodeMultiPolygon(
				`MULTIPOLYGON (((19359932.303 6934328.987,19359932.303 6936823.429,19360250.869 6936688.700,19360304.469 6936851.402,19360304.575 6936851.408,19361268.293 6936851.408,19361267.661 6936835.825,19361430.121 6936782.050,19361432.942 6936851.408,19361478.745 6936851.408,19361709.867 6936723.531,19361704.123 6936582.330,19361798.021 6936578.523,19361833.465 6936294.269,19361739.589 6936298.094,19361686.935 6936158.868,19361780.811 6936155.006,19361775.067 6936013.869,19361960.903 6935959.126,19361964.710 6936053.240,19362226.612 6936136.801,19362162.047 6936280.827,19362023.142 6936333.660,19362223.328 6936631.763,19362454.725 6936752.031,19362454.725 6934328.987,19359932.303 6934328.987),(19361178.238 6936368.122,19361244.741 6936271.154,19361305.699 6936033.012,19361352.631 6936031.100,19361414.848 6936405.638,19361274.975 6936434.786,19361178.238 6936368.122),(19361536.565 6935929.336,19361630.418 6935925.511,19361632.333 6935972.568,19361538.479 6935976.393,19361536.565 6935929.336),(19361945.586 6935582.733,19362086.383 6935576.959,19362049.013 6935814.168,19362002.103 6935816.080,19361998.273 6935721.968,19361951.330 6935723.862,19361945.586 6935582.733)))
`,
			),
			didClip: true,
		},
	}
	// fill tests from makevalidTestCases
	for i, mkvTC := range makevalidTestCases {
		name := fmt.Sprintf("makevalidTestCases #%v %v", i, mkvTC.Description)
		tc := tcase{
			MultiPolygon:         mkvTC.MultiPolygon,
			ExpectedMultiPolygon: mkvTC.ExpectedMultiPolygon,
			didClip:              true,
		}
		switch name {
		case "makevalidTestCases #1 Four Square IO_OI":
			//tc.skip = `failed: mulitpolygon, expected &[[[[1 4] [5 4] [5 8] [1 8]]] [[[5 0] [9 0] [9 4] [5 4]]]] got &[]`
		case "makevalidTestCases #2 Four columns invalid multipolygon":
		//	tc.skip = "failed: mulitpolygon, expected &[[[[0 3] [3 3] [3 0] [6 0] [6 8] [3 7] [0 7]] [[1 5] [3 7] [5 5] [3 4]]]] got &[]"
		}
		tests[name] = tc
	}

	// skip the following tests:
	for name, tc := range tests {
		tfn := fn(tc)
		switch t := tb.(type) {
		case *testing.T:
			t.Run(name, func(t *testing.T) { tfn(t) })
		case *testing.B:
			t.Run(name, func(b *testing.B) {
				b.ReportAllocs()
				for i := 0; i < b.N; i++ {
					tfn(b)
				}
			})
		}
	}
}
